<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
					http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
					http://www.springframework.org/schema/context
					http://www.springframework.org/schema/context/spring-context-4.1.xsd
					http://www.springframework.org/schema/util 
					http://www.springframework.org/schema/util/spring-util.xsd
					http://www.springframework.org/schema/tx
					http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
					http://www.springframework.org/schema/task
					http://www.springframework.org/schema/task/spring-task-4.1.xsd">

<!-- 		<context:property-placeholder location="classpath*:**/geoanalytics.properties" ignore-unresolvable="true" /> -->
	<context:property-placeholder location="classpath:../geoanalytics.properties" ignore-unresolvable="true" />
		
	<bean id="expressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
	    <property name="permissionEvaluator">
	        <bean id="permissionEvaluator" class="gr.cite.geoanalytics.security.permissionevaluator.GeoanalyticsPermissionEvaluator"/>
	    </property>
	</bean>

	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<bean id="jpaDialect" class="org.springframework.orm.jpa.vendor.HibernateJpaDialect">
		<property name="prepareConnection" value="false" />
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="emf" />
		<property name="jpaDialect" ref="jpaDialect" />
	</bean>

	<bean id="springApplicationContext" class="gr.cite.geoanalytics.dataaccess.dao.SpringJpaDaoFactory.SpringApplicationContext" />

	<bean id="fileRepositoryConfig" class="java.util.HashMap">
		<constructor-arg index="0" type="java.util.Map">
			<map key-type="java.lang.String" value-type="java.lang.String">
				<entry key="fileRepositoryPath"
					value="${gr.cite.geoanalytics.data-reposittory.fileRepositoryPath}" />
				<entry key="sizeThreshold" value="1000000000" />
				<entry key="shortSweepPeriod" value="1" />
				<entry key="shortSweepPeriodUnit" value="HOURS" />
				<entry key="longSweepPeriod" value="5" />
				<entry key="longSweepPeriodUnit" value="HOURS" />
			</map>
		</constructor-arg>
	</bean>
	
	<bean id="remoteFileRepositoryHostname" class="java.lang.String"/>

	<bean id="builder" class="gr.cite.geoanalytics.gaap.viewbuilders.PostGISMaterializedViewBuilder" />

	<bean id="securityContextAccessor" class="gr.cite.geoanalytics.security.GeoanalyticsSecurityContextAccessor" />

	<bean id="securityManager" class="gr.cite.geoanalytics.security.SecurityManager" />
	
	
	<bean id="dataCreator" class="gr.cite.clustermanager.layers.DataCreatorGeoanalytics" factory-method="getInstance">
		 <constructor-arg value="${gr.cite.clustermanager.connectionString}" />
	</bean>

	<bean id="dataMonitor" class="gr.cite.clustermanager.layers.DataMonitor" factory-method="getInstance">
		 <constructor-arg value="${gr.cite.clustermanager.connectionString}" />
	</bean>

	<bean id="shapeManagement" class="gr.cite.gos.client.ShapeManagement" >
		<constructor-arg value="${gr.cite.geoanalytics.token}" />
	</bean>
	
	<bean id="geoserverManagement" class="gr.cite.gos.client.GeoserverManagement" >
		<constructor-arg value="${gr.cite.geoanalytics.token}" />
	</bean>

	<bean id="rasterManagement" class="gr.cite.gos.client.RasterManagement" >
		<constructor-arg value="${gr.cite.geoanalytics.token}" />
	</bean>
	
	<bean id="trafficShaper" class="gr.cite.clustermanager.trafficshaping.SimpleTrafficShaper" />	
	
	<bean id="databaseColumnType" class="gr.cite.geoanalytics.dataaccess.typedefinition.PostgreSQLDatabaseColumnType" />
	
	<bean id="geospatialBackendClustered" class="gr.cite.gaap.servicelayer.GeospatialBackendClustered" />

	<bean id="layerReplicator" class="gr.cite.geoanalytics.geospatialbackend.LayerReplicator" init-method="initiate">
	</bean>
	

	<bean id="emf"
		class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="gr.cite.geoanalytics" />
		<property name="jpaProperties">
			<props>
				<prop key="javax.persistence.jdbc.driver">${gr.cite.geoanalytics.persistence.jdbc.driver}
				</prop>
				<prop key="javax.persistence.jdbc.url">${gr.cite.geoanalytics.persistence.jdbc.url}</prop>
				<prop key="hibernate.connection.username">${gr.cite.geoanalytics.persistence.dbusername}</prop>
				<prop key="hibernate.connection.password">${gr.cite.geoanalytics.persistence.dbpassword}</prop>
				<prop key="hibernate.show_sql">${gr.cite.geoanalytics.persistence.hibernate.show_sql}
				</prop>
				<prop key="hibernate.hbm2ddl.auto">${gr.cite.geoanalytics.persistence.hibernate.hbm2dll}
				</prop>
				<prop key="hibernate.dialect">${gr.cite.geoanalytics.persistence.hibernate.dialect}
				</prop>

				<prop key="hibernate.jdbc.batch_size">${gr.cite.geoanalytics.persistence.hibernate.jdbc.batch_size}
				</prop>
				<prop key="hibernate.order_inserts">${gr.cite.geoanalytics.persistence.hibernate.order_inserts}
				</prop>
				<prop key="hibernate.order_updates">${gr.cite.geoanalytics.persistence.hibernate.order_updates}
				</prop>
				<prop key="hibernate.jdbc.batch_versioned_data">${gr.cite.geoanalytics.persistence.hibernate.batch_versioned_data}
				</prop>
				<prop key="hibernate.connection.handling_mode">${gr.cite.geoanalytics.persistence.hibernate.jdbc.batch_versioned_data}
				</prop>
				<prop key="hibernate.connection.release_mode">on_close
				</prop>
				<prop key="hibernate.connection.provider_class">${gr.cite.geoanalytics.persistence.hibernate.connectionpool.provider_class}
				</prop>
				<prop key="hibernate.c3p0.min_size">${gr.cite.geoanalytics.persistence.hibernate.connectionpool.c3p0.min_size}
				</prop>
				<prop key="hibernate.c3p0.max_size">${gr.cite.geoanalytics.persistence.hibernate.connectionpool.c3p0.max_size}
				</prop>
				<prop key="hibernate.c3p0.timeout">${gr.cite.geoanalytics.persistence.hibernate.connectionpool.c3p0.timeout}
				</prop>
				<prop key="hibernate.c3p0.max_statements">${gr.cite.geoanalytics.persistence.hibernate.connectionpool.c3p0.max_statements}
				</prop>
				<prop key="hibernate.c3p0.acquire_retry_attempts">${gr.cite.geoanalytics.persistence.hibernate.connectionpool.c3p0.acquire_retry_attempts}
				</prop>
				<prop key="hibernate.c3p0.acquire_retry_delay">${gr.cite.geoanalytics.persistence.hibernate.connectionpool.c3p0.acquire_retry_delay}
				</prop>
				<prop key="hibernate.c3p0.idle_test_period">${gr.cite.geoanalytics.persistence.hibernate.connectionpool.c3p0.idle_test_period}
				</prop>
				<prop key="hibernate.c3p0.break_after_acquire_failure">${gr.cite.geoanalytics.persistence.hibernate.connectionpool.c3p0.break_after_acquire_failure}
				</prop>
				<prop key="hibernate.c3p0.idle_connection_test_period">${gr.cite.geoanalytics.persistence.hibernate.connectionpool.c3p0.idle_connection_test_period}
				</prop>
				<prop key="hibernate.c3p0.test_connection_on_checkin">${gr.cite.geoanalytics.persistence.hibernate.connectionpool.c3p0.test_connection_on_checkin}
				</prop>
				<prop key="hibernate.c3p0.test_connection_on_checkout">${gr.cite.geoanalytics.persistence.hibernate.connectionpool.c3p0.test_connection_on_checkout}
				</prop>
				<prop key="hibernate.c3p0.preferred_test_query">${gr.cite.geoanalytics.persistence.hibernate.connectionpool.c3p0.preferred_test_query}
				</prop>
			</props>
		</property>
	</bean>

	<bean id="postgisDataStoreConfig" class="gr.cite.geoanalytics.context.DataStoreConfig">
		<property name="dataStoreName" 	value="${gr.cite.geoanalytics.dataaccess.geoServerBridge.postgisDatastore}" />
		<property name="databaseName" 	value="${gr.cite.geoanalytics.dataaccess.geoServerBridge.datastore.database}" />		
		<property name="host"			value="${gr.cite.geoanalytics.dataaccess.geoServerBridge.datastore.host}" />		
		<property name="port"			value="${gr.cite.geoanalytics.dataaccess.geoServerBridge.datastore.port}" />	
		<property name="description" 	value="${gr.cite.geoanalytics.dataaccess.geoServerBridge.datastore.description}" />
		<property name="user"			value="${gr.cite.geoanalytics.dataaccess.dbUser}" />			
		<property name="password"		value="${gr.cite.geoanalytics.dataaccess.dbPass}" />				
	</bean>
	
	<bean id="geotiffDataStoreConfig" class="gr.cite.geoanalytics.context.DataStoreConfig">
		<property name="dataStoreName" 	value="${gr.cite.geoanalytics.dataaccess.geoServerBridge.geotiffDatastore}" />
		<property name="databaseName" 	value="${gr.cite.geoanalytics.dataaccess.geoServerBridge.datastore.database}" />		
		<property name="host"			value="${gr.cite.geoanalytics.dataaccess.geoServerBridge.datastore.host}" />
		<property name="port"			value="${gr.cite.geoanalytics.dataaccess.geoServerBridge.datastore.port}" />					
		<property name="description" 	value="${gr.cite.geoanalytics.dataaccess.geoServerBridge.datastore.description}" />
		<property name="user"			value="${gr.cite.geoanalytics.dataaccess.dbUser}" />			
		<property name="password"		value="${gr.cite.geoanalytics.dataaccess.dbPass}" />				
	</bean>	

 	<bean id="httpLayerOperations" class="gr.cite.geoanalytics.logicallayer.HttpLayerOperations" /> 
	
	<bean id="accessRightDefinitionsResource" class="org.springframework.core.io.ClassPathResource">
    	<constructor-arg value="../accessRightDefinitions.xml" />
	</bean>

	<bean id="layerManager" class="gr.cite.geoanalytics.manager.LayerManager"></bean>	
	<bean id="layerDao" class="gr.cite.geoanalytics.dataaccess.entities.layer.dao.LayerDaoImpl" />
	<bean id="layerTenantDao" class="gr.cite.geoanalytics.dataaccess.entities.layer.dao.LayerTenantDaoImpl" />	

	<util:property-path id="accessRightDefinitionsFile" path="accessRightDefinitionsResource.file" />

	<bean id="geoServerBridgeEnvInitializer" class="gr.cite.gaap.servicelayer.EnvironmentInitializer"
		init-method="asyncInitializeEnvironment" />

	<bean id="jerseyClient" class="com.sun.jersey.api.client.Client" init-method="create" />
	<bean id="geotools.geometryfactory.precisionmodel" class="com.vividsolutions.jts.geom.PrecisionModel" />

	<bean id="geotools.geometryfactory" class="com.vividsolutions.jts.geom.GeometryFactory">
		<constructor-arg name="precisionModel"
			ref="geotools.geometryfactory.precisionmodel" />
		<constructor-arg name="SRID" type="int" value="4326" />
	</bean>
	<bean id="wktReader" class="com.vividsolutions.jts.io.WKTReader">
		<constructor-arg name="geometryFactory" ref="geotools.geometryfactory" />
	</bean>

	<!-- spring will scan all these packages, will find out anotated classes and will register these, in Spring container -->
	<context:annotation-config />
	<context:component-scan base-package="gr.cite.gaap" />
	<context:component-scan base-package="gr.cite.geoanalytics.common" />
	<context:component-scan base-package="gr.cite.geoanalytics.context" />
	<context:component-scan base-package="gr.cite.geoanalytics.geospatialbackend" />
	<context:component-scan base-package="gr.cite.geoanalytics.web" />
	<context:component-scan base-package="gr.cite.geoanalytics.manager" />
	<context:component-scan base-package="gr.cite.geoanalytics.dataaccess" />
	<context:component-scan base-package="gr.cite.geoanalytics.notifications" />
	<context:component-scan base-package="gr.cite.commons.util.datarepository" />
	<context:component-scan base-package="gr.cite.geoanalytics.util.mail" />
	<context:component-scan base-package="gr.cite.geoanalytics.security" />
	<context:component-scan base-package="gr.cite.geoanalytics.geoserverbridge" />
	<context:component-scan base-package="gr.cite.geoanalytics.logicallayer" />
	<tx:annotation-driven transaction-manager="transactionManager"	proxy-target-class="true" />
	
	<!-- Asynchronous Imports of Layers. Persist authorization onto children threads (jobs) -->
	
	<task:annotation-driven executor="importPoolExecutor"  scheduler="importScheduler"/>
	<task:executor id="importPoolExecutor" pool-size="6"/>
	<task:scheduler id="importScheduler" pool-size="10"/>
	
	<bean id="importPool" class="org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor">
	     <constructor-arg ref="importPoolExecutor"/>
	</bean>
</beans>
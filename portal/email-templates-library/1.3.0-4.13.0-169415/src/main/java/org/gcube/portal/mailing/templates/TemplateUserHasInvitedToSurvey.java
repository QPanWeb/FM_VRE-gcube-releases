package org.gcube.portal.mailing.templates;

import java.util.Base64;

import org.gcube.common.portal.GCubePortalConstants;
import org.gcube.common.portal.mailing.templates.AbstractTemplate;
import org.gcube.common.portal.mailing.templates.Template;

/**
 * 
 * @author Massimiliano Assante, CNR-ISTI
 *
 */
public class TemplateUserHasInvitedToSurvey extends AbstractTemplate implements Template {
	private final String encodedTemplateHTML = "";
	private final String encodedTemplateTEXT = "e3tHQVRFV0FZX05BTUV9fQ0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KSGkge3tVU0VSX05BTUV9fSwNCnt7TUFOQUdFUl9VU0VSX0ZVTExOQU1FfX0gaGFzIGludml0ZWQgeW91IHRvIGFuc3dlciBhIHF1ZXN0aW9ubmFpcmUgKHt7U1VSVkVZX05BTUV9fSkgaW4gdGhlIGNvbnRleHQgb2Yge3tTRUxFQ1RFRF9WUkVfTkFNRX19IFZSRS4NCiA8cCBjbGFzcz0ibGVhZCIgPlRoYW5rIHlvdSB2ZXJ5IG11Y2ggZm9yIHlvdXIgdGltZSBhbmQgY29vcGVyYXRpb24uPC9wPg0KDQpQYXJ0aWNpcGF0ZSBub3c6IHt7U1VSVkVZX1VSTH19DQoNCnt7U1VSVkVZX0FOT05ZTU9VU319";
	
	private final static String ANONYM_MESSAGE = "Please note: your participation in the questionnaire is completely voluntary and all of your responses will be kept confidential. " + 
	"The access code in the link is to remove you from the list once you have completed the questionnaire. " +
	"No personally identifiable information will be associated with your responses to any reports of these data";
	
	private String surveyName;
	private String UrlWithoutParams;
	private String currentGroupName;
	private String fullNameUser;
	private String surveyAdminFullName;
	private String uuid;
	private boolean anonymous;

	/**
	 * 
	 * @param gatewayName
	 * @param gatewayURL
	 * @param surveyName
	 * @param urlWithoutParams
	 * @param currentGroupName
	 * @param fullNameUser
	 * @param surveyAdminFullName
	 * @param anonymous
	 */
	public TemplateUserHasInvitedToSurvey(String gatewayName, String gatewayURL, String surveyName, String uuid,
			String urlWithoutParams, String currentGroupName, String fullNameUser, String surveyAdminFullName, boolean anonymous) {
		super(gatewayName, gatewayURL);
		this.surveyName = surveyName;
		this.UrlWithoutParams = urlWithoutParams;
		this.currentGroupName = currentGroupName;
		this.fullNameUser = fullNameUser;
		this.surveyAdminFullName = surveyAdminFullName;
		this.anonymous = anonymous;
		this.uuid = uuid;
	}

	@Override
	public String compile(String templateContent) {
		String surveyURL= this.UrlWithoutParams + "?UUID=" + this.uuid;
		String vreURL = new StringBuffer(getGatewayURL())
						.append(GCubePortalConstants.PREFIX_GROUP_URL)
						.append("/").append(currentGroupName.toLowerCase()).toString();
		String anonymousMessage = (anonymous) ? ANONYM_MESSAGE : "";
						
		return new String(Base64.getDecoder().decode(templateContent))
				
				.replace("{{SELECTED_VRE_NAME}}", this.currentGroupName)
				.replace("{{USER_NAME}}", fullNameUser)
				.replace("{{MANAGER_USER_FULLNAME}}", this.surveyAdminFullName)				
				.replace("{{GATEWAY_LOGO:URL}}", getGatewayLogoURL())			
				.replace("{{GATEWAY_URL}}", getGatewayURL())	
				.replace("{{GATEWAY_NAME}}", getGatewayName())
				.replace("{{SURVEY_NAME}}", this.surveyName)
				.replace("{{SURVEY_URL}}", surveyURL)
				.replace("{{SURVEY_ANONYMOUS}}", anonymousMessage)
				.replace("{{VRE_URL}}", vreURL);
	}
	
	@Override
	public String getTextHTML() {
		return compile(encodedTemplateHTML);
	}
	
	@Override
	public String getTextPLAIN() {
		return compile(encodedTemplateTEXT);
	}
}

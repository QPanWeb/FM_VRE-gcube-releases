package org.gcube.portal.mailing.templates;

import java.util.Base64;

import org.gcube.common.portal.GCubePortalConstants;
import org.gcube.common.portal.mailing.templates.AbstractTemplate;
import org.gcube.common.portal.mailing.templates.Template;
import org.gcube.vomanagement.usermanagement.model.GCubeUser;

/**
 * 
 * @author Massimiliano Assante, CNR-ISTI
 *
 */
public class TemplateUserHasInvited extends AbstractTemplate implements Template {
	private final String encodedTemplateHTML = "";
	private final String encodedTemplateTEXT = "e3tHQVRFV0FZX05BTUV9fQ0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0Ke3tVU0VSX0ZVTExOQU1FfX0gaGFzIGp1c3QgaW52aXRlZCB7e0lOVklURURfVVNFUl9FTUFJTH19IHRvIHt7U0VMRUNURURfVlJFX05BTUV9fSBWUkUuDQoNCg0KRnVydGhlciBpbmZvIGFib3V0IHt7VVNFUl9GVUxMTkFNRX19Og0KDQpFbWFpbDoge3tVU0VSX0VNQUlMfX0NClVzZXJuYW1lOiB7e1VTRVJfSUR9fQ0KDQoNCllvdSByZWNlaXZlZCB0aGlzIGVtYWlsIGJlY2F1c2UgeW91IGFyZSBhIG1hbmFnZXIgb2Yge3tTRUxFQ1RFRF9WUkVfTkFNRX19Lg0KU2VlIGFsbCBpbnZpdGVzIGluIHt7U0VMRUNURURfVlJFX05BTUV9fSBWUkU6IHt7TUFOQUdFX0lOVklURV9VUkx9fQ==";
	
	private GCubeUser theRegisteredUser;
	private String theVREName;
	private String invitedEmail;
	private String manageInviteURL;
	/**
	 * 
	 * @param theRegisteredUser
	 * @param theVRE
	 * @param optionalMessage
	 * @param gatewayName
	 * @param gatewayURL
	 */
	public TemplateUserHasInvited(GCubeUser theRegisteredUser, String invitedEmail, String theVREName, String gatewayName, String gatewayURL) {
		super(gatewayName, gatewayURL);
		this.theRegisteredUser = theRegisteredUser;
		this.theVREName = theVREName;
		this.invitedEmail = invitedEmail;
		this.manageInviteURL = new StringBuffer(gatewayURL)
				.append(GCubePortalConstants.PREFIX_GROUP_URL)
				.append("/").append(theVREName.toLowerCase())
				.append(GCubePortalConstants.VRE_ADMINISTRATION_URL).toString();
	}

	@Override
	public String compile(String templateContent) {
		return new String(Base64.getDecoder().decode(templateContent))
				.replace("{{SELECTED_VRE_NAME}}", theVREName)
				.replace("{{GATEWAY_LOGO:URL}}", getGatewayLogoURL())			
				.replace("{{GATEWAY_NAME}}", getGatewayName())
				.replace("{{INVITED_USER_EMAIL}}", this.invitedEmail)
				.replace("{{USER_EMAIL}}", theRegisteredUser.getEmail())
				.replace("{{USER_ID}}", theRegisteredUser.getUsername())
				.replace("{{MANAGE_INVITE_URL}}", this.manageInviteURL)
				.replace("{{USER_FULLNAME}}", theRegisteredUser.getFullname());
		
	}
	
	@Override
	public String getTextHTML() {
		return compile(encodedTemplateHTML);
	}
	
	@Override
	public String getTextPLAIN() {
		return compile(encodedTemplateTEXT);
	}
}

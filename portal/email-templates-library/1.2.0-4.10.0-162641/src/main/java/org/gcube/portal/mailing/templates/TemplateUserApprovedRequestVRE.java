package org.gcube.portal.mailing.templates;

import java.util.Base64;
import java.util.Date;

import org.gcube.common.portal.GCubePortalConstants;
import org.gcube.common.portal.PortalContext;
import org.gcube.common.portal.mailing.templates.AbstractTemplate;
import org.gcube.common.portal.mailing.templates.Template;
import org.gcube.portal.mailing.message.Constants;
import org.gcube.vomanagement.usermanagement.model.GCubeGroup;
import org.gcube.vomanagement.usermanagement.model.GCubeMembershipRequest;
import org.gcube.vomanagement.usermanagement.model.GCubeUser;

/**
 * 
 * @author Massimiliano Assante, CNR-ISTI
 *
 */
public class TemplateUserApprovedRequestVRE extends AbstractTemplate implements Template {

	private final String encodedTemplateHTML = "";
	private final String encodedTemplateTEXT = "e3tHQVRFV0FZX05BTUV9fQ0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KSGkge3tSRVFVRVNUSU5HX1VTRVJfRklSU1RfTkFNRX19LA0KDQp7e1VTRVJfRlVMTE5BTUV9fSBoYXMgYXBwcm92ZWQgeW91ciBhY2Nlc3MgcmVxdWVzdCBmb3Ige3tTRUxFQ1RFRF9WUkVfTkFNRX19IFZSRS4NCg0KRnJvbSBub3cgb24geW91IGNhbiBhY2Nlc3MgaXQgYXQge3tWUkVfVVJMfX0gdXNpbmcgeW91ciBlbWFpbCB7e1JFUVVFU1RJTkdfVVNFUl9FTUFJTH19DQoNCi0tLQ0KWW91IHJlY2VpdmVkIHRoaXMgZW1haWwgYmVjYXVzZSB5b3UgcmVxdWVzdGVkIGFjY2VzcyB0byB7e1NFTEVDVEVEX1ZSRV9OQU1FfX0gb24ge3tNQU5BR0VfUkVRVUVTVF9EQVRFfX0uDQo=";

	private GCubeUser theRequestingUser;
	private GCubeUser theManagerUser;
	private GCubeGroup theRequestedVRE;
	private Date originalRequestDate;
	private String vreURL;

	/**
	 * 
	 * @param theRequestingUser an instance of @see {@link GCubeUser} representing the user who requested access
	 * @param theManagerUseran instance of @see {@link GCubeUser} representing the manager who approved the request
	 * @param theRequestedVRE instance of @see {@link GCubeGroup} of the current VRE
	 * @param originalRequestDate the request date as in the associated {@link GCubeMembershipRequest}
	 * @param gatewayName gateway name can be obtained with {@link PortalContext#getGatewayName(javax.servlet.http.HttpServletRequest)}
	 * @param gatewayURL gateway URL name can be obtained with {@link PortalContext#getGatewayURL(javax.servlet.http.HttpServletRequest)}
	 */
	public TemplateUserApprovedRequestVRE(GCubeUser theRequestingUser, GCubeUser theManagerUser, GCubeGroup theRequestedVRE, Date originalRequestDate, String gatewayName, String gatewayURL) {
		super(gatewayName, gatewayURL);
		this.theRequestingUser = theRequestingUser;
		this.theManagerUser = theManagerUser;
		this.theRequestedVRE = theRequestedVRE;		
		this.originalRequestDate = originalRequestDate;
		this.vreURL = new StringBuffer(gatewayURL)
				.append(GCubePortalConstants.PREFIX_GROUP_URL)
				.append("/").append(theRequestedVRE.getGroupName().toLowerCase()).toString();
	}
	
	@Override
	public String compile(String templateContent) {
		String userProfileLink = new StringBuffer(vreURL)
				.append("/").append(getUserProfileLink(theManagerUser.getUsername())).toString();

		return new String(Base64.getDecoder().decode(templateContent))
				.replace("{{REQUESTING_USER_FIRST_NAME}}", theRequestingUser.getFirstName())
				.replace("{{GATEWAY_LOGO:URL}}", getGatewayLogoURL())			
				.replace("{{GATEWAY_NAME}}", getGatewayName())
				.replace("{{USER_FULLNAME}}", theManagerUser.getFullname())
				.replace("{{SELECTED_VRE_NAME}}", theRequestedVRE.getGroupName())
				.replace("{{VRE_URL}}", vreURL)
				.replace("{{REQUESTING_USER_EMAIL}}", theRequestingUser.getEmail())
				.replace("{{MANAGE_REQUEST_DATE}}", originalRequestDate.toString())
				.replace("{{USER_VREMEMBER_PROFILE_URL}}", userProfileLink)
				;				
	}

	@Override
	public String getTextHTML() {
		return compile(encodedTemplateHTML);
	}

	@Override
	public String getTextPLAIN() {
		return compile(encodedTemplateTEXT);
	}
	
	private String getUserProfileLink(String username) {
		return "profile?"+ new String(
				Base64.getEncoder().encodeToString(Constants.USER_PROFILE_OID.getBytes())+
				"="+
						new String( Base64.getEncoder().encodeToString(username.getBytes()) )
						);
	}
}

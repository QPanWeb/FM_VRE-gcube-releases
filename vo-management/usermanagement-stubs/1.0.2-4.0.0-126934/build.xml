<?xml version="1.0"?>
<project default="jarStubs" name="GCUBE User Management stub">

	<!-- environment -->
	<property environment="env" />
	
	
	<!-- external environment -->
	<echo message="container.dir ->${env.GLOBUS_LOCATION}" level="info"/>
	<property name="container.dir" value="${env.GLOBUS_LOCATION}" />
	<property name="container.schema.dir" location="${container.dir}/share/schema" />
	<property name="build.packages" location="${container.dir}/share/gcore_tools/build-packages.xml" />
	<property name="build.stubs" location="${container.dir}/share/gcore_tools/build-stubs.xml" />
	
	<!-- load non-standard tasks -->
	<taskdef resource="ise/antelope/tasks/antlib.xml">
	  <classpath>
	    <pathelement location="${container.dir}/lib/AntelopeTasks_3.4.2.jar"/>
	  </classpath>
	</taskdef>
	

	
	<!-- stub-specific locations -->	
	<property name="stublib.dir" location="${basedir}" />
	<property name="wsdl.dir.name" value="schema" />
	<property name="wsdl.dir" location="${stublib.dir}/${wsdl.dir.name}"/>
	<property name="source.dir" value="${stublib.dir}/src" />
	
	<!-- load input properties  -->
	<property file="${stublib.dir}/build.properties" />
	
	<stringutil property="package.dir" string="${package}"><!-- derive package.dir from ${package} -->
		<replace regex="\." replacement="/"/>
	</stringutil>

	<!-- file defaults -->
	<property name="jarfile.stubs" value="${package}-stubs.jar" />	

	
	<property name="full.stubs" value="true"/>
	<property name="stubs.package" value="${package}.${stubs.dir.name}"/>
	<property name="stubs.dir.name" value="stubs" /> <!-- auxiliary stub classes -->
	<property name="stubs.dir" value="${source.dir}/${package.dir}/${stubs.dir.name}" />
	<available file="${stubs.dir}" property="stubs.dir.present"/>

	
	<!-- temporary build locations -->
	<property name="build.dir" location="${stublib.dir}/build" />
	<property name="build.class.dir" location="${build.dir}/classes" />
	<property name="build.lib.dir" location="${build.dir}/lib" />
	<property name="build.schema.dir" location="${build.dir}/schema" />
	<property name="build.schema.service.dir" location="${build.schema.dir}/${package}" />		
	<property name="build.stubs.dir" location="${build.dir}/stubs-${package}" />
	<property name="build.stubs.src.dir" location="${build.stubs.dir}/src" />
	<property name="build.stubs.class.dir" location="${build.stubs.dir}/classes" />
	
	
	<!-- initialisation tasks -->
	<target name="init" depends="clean" description="creates build structures"> 
	
		<!-- input summary -->
		<echo message="Root Package -> ${package}" level="info"/>
		<echo message="Interfaces -> ${schema.dir}" level="info"/>
		<echo message="Auxiliary Stubs  -> ${stubs.dir}" level="info"/>
		<echo message="External dependencies -> ${lib.location}" level="info"/>



		
		<!-- create temporary build folders -->
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.class.dir}" />
		<delete dir="${build.lib.dir}" />
		<mkdir dir="${build.lib.dir}" />
		<mkdir dir="${build.schema.service.dir}" />
		<mkdir dir="${build.stubs.dir}" />
		<mkdir dir="${build.stubs.src.dir}" />
		<mkdir dir="${build.stubs.class.dir}"/>
		
		<!--
		<copy toDir="${build.schema.dir}">
			<fileset dir="${container.schema.dir}" casesensitive="yes">
				<include name="wsrf/**/*" />
				<include name="ws/**/*" />
				<include name="gcube/**/**/**/*" />
			</fileset>
		</copy>
		-->
		<copy toDir="${build.schema.service.dir}">
			<fileset dir="${wsdl.dir}"/>
		</copy>
		
	</target>
	
	<target name="generateMappings"> 
		<var name="mappings" value=""/>
	    <if name="namespace.1">
	    	<if name="package.1">
	    		<var name="package.1" value="${stubs.package}.${package.1}"/>
	    	<else>
	    		<var name="package.1" value="${stubs.package}"/></else>
	    	</if>
	        <var name="mappings" value="${mappings} -N${namespace.1}=${package.1} -N${namespace.1}/service=${package.1}.service -N${namespace.1}/bindings=${package.1}.bindings"/>
	    </if>
	    <if name="namespace.2">
	    	<if name="package.2">
	    		<var name="package.2" value="${stubs.package}.${package.2}"/>
	    	<else>
	    		<var name="package.2" value="${stubs.package}"/></else>
	    	</if>
	        <var name="mappings" value="${mappings} -N${namespace.2}=${package.2} -N${namespace.2}/service=${package.2}.service -N${namespace.2}/bindings=${package.2}.bindings"/>
	    </if>
	    <if name="namespace.3">
	    	<if name="package.3">
	    		<var name="package.3" value="${stubs.package}.${package.3}"/>
	    	<else>
	    		<var name="package.3" value="${stubs.package}"/></else>
	    	</if>
	        <var name="mappings" value="${mappings} -N${namespace.3}=${package.3} -N${namespace.3}/service=${package.3}.service -N${namespace.3}/bindings=${package.3}.bindings"/>
	    </if>
	    <if name="namespace.4">
	    	<if name="package.4">
	    		<var name="package.4" value="${stubs.package}.${package.4}"/>
	    	<else>
	    		<var name="package.4" value="${stubs.package}"/></else>
	    	</if>
	        <var name="mappings" value="${mappings} -N${namespace.4}=${package.4} -N${namespace.4}/service=${package.4}.service -N${namespace.4}/bindings=${package.4}.bindings"/>
	    </if>		
	    <if name="namespace.5">
	    	<if name="package.5">
	    		<var name="package.5" value="${stubs.package}.${package.5}"/>
	    	<else>
	    		<var name="package.5" value="${stubs.package}"/></else>
	    	</if>
	        <var name="mappings" value="${mappings} -N${namespace.5}=${package.5} -N${namespace.5}/service=${package.5}.service -N${namespace.5}/bindings=${package.5}.bindings"/>
	    </if>		
		<if name="namespace.6">
	    	<if name="package.6">
	    		<var name="package.6" value="${stubs.package}.${package.6}"/>
	    	<else>
	    		<var name="package.6" value="${stubs.package}"/></else>
	    	</if>
	        <var name="mappings" value="${mappings} -N${namespace.6}=${package.6} -N${namespace.6}/service=${package.6}.service -N${namespace.6}/bindings=${package.6}.bindings"/>
	    </if>
	</target>

	<!-- wsdl specific tasks. Clone for each additional wsdl, if required -->
	<target name="processWSDL.1" depends="init" if="wsdl.1" description="Flattens wsdl and generate bindings">
		<echo message="PROCESSING ${wsdl.1}'s WSDL:" level="debug"/>
		<ant antfile="${build.stubs}" target="flatten">
				<property name="source.flatten.dir" location="${build.schema.service.dir}" />
				<property name="target.flatten.dir" location="${build.schema.service.dir}" />
				<property name="wsdl.source" value="${wsdl.1}.wsdl" />
				<property name="wsdl.target" value="${wsdl.1}_flattened.wsdl" />
				<property name="wsdl.porttype" value="${wsdl.1}PortType" />
		</ant>
		<ant antfile="${build.stubs}" target="generateBinding">
			<property name="source.binding.dir" value="${build.schema.service.dir}" />
			<property name="target.binding.dir" value="${build.schema.service.dir}" />
			<property name="porttype.wsdl" value="${wsdl.1}_flattened.wsdl" />
			<property name="binding.root" value="${wsdl.1}" />
		</ant>
	</target>	
	
	<target name="processWSDL.2" depends="init" if="wsdl.2" description="Flattens wsdl and generate bindings">
		<echo message="PROCESSING ${wsdl.2}'s WSDL:" level="debug"/>
		<ant antfile="${build.stubs}" target="flatten">
				<property name="source.flatten.dir" location="${build.schema.service.dir}" />
				<property name="target.flatten.dir" location="${build.schema.service.dir}" />
				<property name="wsdl.source" value="${wsdl.2}.wsdl" />
				<property name="wsdl.target" value="${wsdl.2}_flattened.wsdl" />
				<property name="wsdl.porttype" value="${wsdl.2}PortType" />
		</ant>
		<ant antfile="${build.stubs}" target="generateBinding">
			<property name="source.binding.dir" value="${build.schema.service.dir}" />
			<property name="target.binding.dir" value="${build.schema.service.dir}" />
			<property name="porttype.wsdl" value="${wsdl.2}_flattened.wsdl" />
			<property name="binding.root" value="${wsdl.2}" />
		</ant>
	</target>	
	
	<target name="processWSDL.3" depends="init" if="wsdl.3" description="Flattens wsdl and generate bindings">
		<echo message="PROCESSING ${wsdl.3}'s WSDL:" level="debug"/>
		<ant antfile="${build.stubs}" target="flatten">
				<property name="source.flatten.dir" location="${build.schema.service.dir}" />
				<property name="target.flatten.dir" location="${build.schema.service.dir}" />
				<property name="wsdl.source" value="${wsdl.3}.wsdl" />
				<property name="wsdl.target" value="${wsdl.3}_flattened.wsdl" />
				<property name="wsdl.porttype" value="${wsdl.3}PortType" />
		</ant>
		<ant antfile="${build.stubs}" target="generateBinding">
			<property name="source.binding.dir" value="${build.schema.service.dir}" />
			<property name="target.binding.dir" value="${build.schema.service.dir}" />
			<property name="porttype.wsdl" value="${wsdl.3}_flattened.wsdl" />
			<property name="binding.root" value="${wsdl.3}" />
		</ant>
	</target>	
	
	<target name="processWSDL.4" depends="init" if="wsdl.4" description="Flattens wsdl and generate bindings">
		<echo message="PROCESSING ${wsdl.4}'s WSDL:" level="debug"/>
		<ant antfile="${build.stubs}" target="flatten">
				<property name="source.flatten.dir" location="${build.schema.service.dir}" />
				<property name="target.flatten.dir" location="${build.schema.service.dir}" />
				<property name="wsdl.source" value="${wsdl.4}.wsdl" />
				<property name="wsdl.target" value="${wsdl.4}_flattened.wsdl" />
				<property name="wsdl.porttype" value="${wsdl.4}PortType" />
		</ant>
		<ant antfile="${build.stubs}" target="generateBinding">
			<property name="source.binding.dir" value="${build.schema.service.dir}" />
			<property name="target.binding.dir" value="${build.schema.service.dir}" />
			<property name="porttype.wsdl" value="${wsdl.4}_flattened.wsdl" />
			<property name="binding.root" value="${wsdl.4}" />
		</ant>
	</target>	
	
	<!-- Cross-wsdl tasks. Adds dependencies for each additional wsdl, if required -->
	<target name="processWSDLs" depends="processWSDL.1,processWSDL.2,processWSDL.3,processWSDL.4" description="generate bindings for all porttypes" />
	<target name="generateStubs" depends="generateMappings,generateStubs.1,generateStubs.2,generateStubs.3,generateStubs.4" description="generate stub classes for all porttypes" />

	<target name="buildStubs" depends="processWSDLs,generateStubs" description="build service stubs">
		<if name="full.stubs" value="true">
			<if name="stubs.dir.present">
				<copy toDir="${build.stubs.src.dir}/${package.dir}/${stubs.dir.name}" overwrite="true">
					<fileset dir="${stubs.dir}" casesensitive="yes">
						<exclude name="**/*.class" />
					</fileset>
				</copy>
			</if>
		</if>
		<javac srcdir="${build.stubs.src.dir}" destdir="${build.stubs.class.dir}" debug="${java.debug}" deprecation="${java.deprecation}" description="compile stub classes">
			<include name="**/*.java" />
			<classpath>
				<fileset dir="${container.dir}/lib">
					<include name="*.jar" />
					<exclude name="${jarfile.stubs}" />
					<exclude name="${jarfile}" />
				</fileset>

			</classpath>
		</javac>

	</target>
	
	<target name="jarStubs" depends="buildStubs" description="jar stub classes">
		<jar destfile="${build.lib.dir}/${jarfile.stubs}" basedir="${build.stubs.class.dir}" />
	</target>
	
	<target name="deployStubs" depends="jarStubs" description="deploy stub jar">
		<copy file="${build.lib.dir}/${jarfile.stubs}" toDir="${container.dir}/lib"/>
					
	</target>
	
	<target name="stubs" depends="deployStubs" description="generates, builds, jars and deploy stubs"/>
	
	<!-- undeployement tasks -->
	<target name="undeployStubs" description="deploy stub jar">
		<delete file="${container.dir}/lib/${jarfile.stubs}"/>			
	</target>
	
	
	<target name="generateStubs.1"  if="wsdl.1" description="Generate wsdl stub classes">
		<echo message="GENERATING ${wsdl.1}'s STUBS:" level="debug"/>
		<ant antfile="${build.stubs}" target="generateStubs">
			<property name="mappings" value="${mappings}"/>
			<property name="source.stubs.dir" location="${build.schema.service.dir}" />
			<property name="target.stubs.dir" location="${build.stubs.src.dir}" />
			<property name="wsdl.file" value="${wsdl.1}_service.wsdl" />
		</ant>
	</target>
	
	<target name="generateStubs.2"  if="wsdl.2" description="Generate wsdl stub classes">
		<echo message="GENERATING ${wsdl.2}'s STUBS:" level="debug"/>
		<ant antfile="${build.stubs}" target="generateStubs">
			<property name="mappings" value="${mappings}"/>
			<property name="source.stubs.dir" location="${build.schema.service.dir}" />
			<property name="target.stubs.dir" location="${build.stubs.src.dir}" />
			<property name="wsdl.file" value="${wsdl.2}_service.wsdl" />
		</ant>
	</target>


	<target name="generateStubs.3"  if="wsdl.3" description="Generate wsdl stub classes">
		<echo message="GENERATING ${wsdl.3}'s STUBS:" level="debug"/>
		<ant antfile="${build.stubs}" target="generateStubs">
			<property name="mappings" value="${mappings}"/>
			<property name="source.stubs.dir" location="${build.schema.service.dir}" />
			<property name="target.stubs.dir" location="${build.stubs.src.dir}" />
			<property name="wsdl.file" value="${wsdl.3}_service.wsdl" />
		</ant>
	</target>
	
	<target name="generateStubs.4"  if="wsdl.4" description="Generate wsdl stub classes">
		<echo message="GENERATING ${wsdl.4}'s STUBS:" level="debug"/>
		<ant antfile="${build.stubs}" target="generateStubs">
			<property name="mappings" value="${mappings}"/>
			<property name="source.stubs.dir" location="${build.schema.service.dir}" />
			<property name="target.stubs.dir" location="${build.stubs.src.dir}" />
			<property name="wsdl.file" value="${wsdl.4}_service.wsdl" />
		</ant>
	</target>


	<target name="clean">
		<delete dir="${build.dir}" quiet="true"/>
	</target>
	
</project>
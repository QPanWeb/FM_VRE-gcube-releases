{"docs":[
{"_id":"_design/JobUsageRecord","language":"javascript","views":{"all":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"JobUsageRecord\" || doc.recordType == \"JobUsageRecord\"){\n\t\tif((doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\t\tvar data = {};\n\t\tdata.operationCount = doc.operationCount ? Number(doc.operationCount) : 1;\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}","reduce":"function(keys, values, rereduce){\n\tvar total = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal = Number(total) + Number(values[i].operationCount);\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\t\n\treturn ret;\n}"},"consumerId":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"JobUsageRecord\" || doc.recordType == \"JobUsageRecord\"){\n\t\tif((doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\t\tvar data = {};\n\t\tdata.operationCount = doc.operationCount ? Number(doc.operationCount) : 1;\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.consumerId);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}","reduce":"function(keys, values, rereduce){\n\tvar total = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal = Number(total) + Number(values[i].operationCount);\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\t\n\treturn ret;\n}"}}},
{"_id":"_design/JobUsageRecordValues","language":"javascript","views":{"consumerId":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"JobUsageRecord\" || doc.recordType == \"JobUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.consumerId);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"}}},
{"_id":"_design/PortletUsageRecord", "language":"javascript","views":{"all":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"PortletUsageRecord\" || doc.recordType == \"PortletUsageRecord\"){\n\t\tif((doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\t\tvar data = {};\n\t\tdata.operationCount = doc.operationCount ? Number(doc.operationCount) : 1;\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}","reduce":"function(keys, values, rereduce){\n\tvar total = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal = Number(total) + Number(values[i].operationCount);\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\t\n\treturn ret;\n}"},"consumerId":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"PortletUsageRecord\" || doc.recordType == \"PortletUsageRecord\"){\n\t\tvar data = {\n\t\t\t\"operationCount\" : doc.operationCount ? doc.operationCount : 1\n\t\t}\n\t\tvar dataKey = getDataKey(doc.creationTime);\n\t\tdataKey.unshift(doc.consumerId);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}","reduce":"function(keys, values, rereduce){\n\tvar total = 0;\n\tvar numerator = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal += values[i].operationCount;\n\t}\n\t\n\treturn {\n\t\t\"operationCount\" : total\n\t};\n}"}}},
{"_id":"_design/PortletUsageRecordValues","language":"javascript","views":{"consumerId":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"PortletUsageRecord\" || doc.recordType == \"PortletUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.consumerId);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"}}},
{"_id":"_design/ServiceUsageRecord","language":"javascript","views":{"all":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"ServiceUsageRecord\" || doc.recordType == \"ServiceUsageRecord\"){\n\t\tif((doc.duration && isNaN(Number(doc.duration))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\n\t\tvar data = {};\n\t\tdata.duration = doc.duration ? Number(doc.duration) : 1;\n\t\tdata.operationCount = doc.operationCount ? Number(doc.operationCount) : 1;\n\t\tdata.maxInvocationTime = doc.maxInvocationTime ? doc.maxInvocationTime : data.duration;\n\t\tdata.minInvocationTime = doc.minInvocationTime ? doc.minInvocationTime : data.duration;\n\t\t\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}","reduce":"function(keys, values, rereduce){\n\tvar maxInvocationTime = Number(values[0].maxInvocationTime);\n\tvar minInvocationTime = Number(values[0].minInvocationTime);\n\tvar total = 0;\n\tvar numerator = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal += Number(values[i].operationCount);\n\t\tnumerator += Number(values[i].operationCount) * Number(values[i].duration);\n\t\tif(maxInvocationTime<=values[i].maxInvocationTime){\n\t\t\tmaxInvocationTime = values[i].maxInvocationTime;\n\t\t}\n\t\tif(minInvocationTime>=values[i].minInvocationTime){\n\t\t\tminInvocationTime = values[i].minInvocationTime;\n\t\t}\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.duration = Number(numerator)/Number(total);\n\tret.maxInvocationTime = Number(maxInvocationTime);\n\tret.minInvocationTime = Number(minInvocationTime);\n\n\treturn ret;\n}"},"serviceClass":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"ServiceUsageRecord\" || doc.recordType == \"ServiceUsageRecord\"){\n\t\tif((doc.duration && isNaN(Number(doc.duration))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\n\t\tvar data = {};\n\t\tdata.duration = doc.duration ? Number(doc.duration) : 1;\n\t\tdata.operationCount = doc.operationCount ? Number(doc.operationCount) : 1;\n\t\tdata.maxInvocationTime = doc.maxInvocationTime ? doc.maxInvocationTime : data.duration;\n\t\tdata.minInvocationTime = doc.minInvocationTime ? doc.minInvocationTime : data.duration;\n\t\t\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.serviceClass);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}","reduce":"function(keys, values, rereduce){\n\tvar maxInvocationTime = Number(values[0].maxInvocationTime);\n\tvar minInvocationTime = Number(values[0].minInvocationTime);\n\tvar total = 0;\n\tvar numerator = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal += Number(values[i].operationCount);\n\t\tnumerator += Number(values[i].operationCount) * Number(values[i].duration);\n\t\tif(maxInvocationTime<=values[i].maxInvocationTime){\n\t\t\tmaxInvocationTime = values[i].maxInvocationTime;\n\t\t}\n\t\tif(minInvocationTime>=values[i].minInvocationTime){\n\t\t\tminInvocationTime = values[i].minInvocationTime;\n\t\t}\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.duration = Number(numerator)/Number(total);\n\tret.maxInvocationTime = Number(maxInvocationTime);\n\tret.minInvocationTime = Number(minInvocationTime);\n\n\treturn ret;\n}"},"consumerId":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"ServiceUsageRecord\" || doc.recordType == \"ServiceUsageRecord\"){\n\t\tif((doc.duration && isNaN(Number(doc.duration))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\n\t\tvar data = {};\n\t\tdata.duration = doc.duration ? Number(doc.duration) : 1;\n\t\tdata.operationCount = doc.operationCount ? Number(doc.operationCount) : 1;\n\t\tdata.maxInvocationTime = doc.maxInvocationTime ? doc.maxInvocationTime : data.duration;\n\t\tdata.minInvocationTime = doc.minInvocationTime ? doc.minInvocationTime : data.duration;\n\t\t\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.consumerId);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}","reduce":"function(keys, values, rereduce){\n\tvar maxInvocationTime = Number(values[0].maxInvocationTime);\n\tvar minInvocationTime = Number(values[0].minInvocationTime);\n\tvar total = 0;\n\tvar numerator = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal += Number(values[i].operationCount);\n\t\tnumerator += Number(values[i].operationCount) * Number(values[i].duration);\n\t\tif(maxInvocationTime<=values[i].maxInvocationTime){\n\t\t\tmaxInvocationTime = values[i].maxInvocationTime;\n\t\t}\n\t\tif(minInvocationTime>=values[i].minInvocationTime){\n\t\t\tminInvocationTime = values[i].minInvocationTime;\n\t\t}\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.duration = Number(numerator)/Number(total);\n\tret.maxInvocationTime = Number(maxInvocationTime);\n\tret.minInvocationTime = Number(minInvocationTime);\n\n\treturn ret;\n}"},"host":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"ServiceUsageRecord\" || doc.recordType == \"ServiceUsageRecord\"){\n\t\tif((doc.duration && isNaN(Number(doc.duration))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\n\t\tvar data = {};\n\t\tdata.duration = doc.duration ? Number(doc.duration) : 1;\n\t\tdata.operationCount = doc.operationCount ? Number(doc.operationCount) : 1;\n\t\tdata.maxInvocationTime = doc.maxInvocationTime ? doc.maxInvocationTime : data.duration;\n\t\tdata.minInvocationTime = doc.minInvocationTime ? doc.minInvocationTime : data.duration;\n\t\t\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.host);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}","reduce":"function(keys, values, rereduce){\n\tvar maxInvocationTime = Number(values[0].maxInvocationTime);\n\tvar minInvocationTime = Number(values[0].minInvocationTime);\n\tvar total = 0;\n\tvar numerator = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal += Number(values[i].operationCount);\n\t\tnumerator += Number(values[i].operationCount) * Number(values[i].duration);\n\t\tif(maxInvocationTime<=values[i].maxInvocationTime){\n\t\t\tmaxInvocationTime = values[i].maxInvocationTime;\n\t\t}\n\t\tif(minInvocationTime>=values[i].minInvocationTime){\n\t\t\tminInvocationTime = values[i].minInvocationTime;\n\t\t}\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.duration = Number(numerator)/Number(total);\n\tret.maxInvocationTime = Number(maxInvocationTime);\n\tret.minInvocationTime = Number(minInvocationTime);\n\n\treturn ret;\n}"},"callerHost":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"ServiceUsageRecord\" || doc.recordType == \"ServiceUsageRecord\"){\n\t\tif((doc.duration && isNaN(Number(doc.duration))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\n\t\tvar data = {};\n\t\tdata.duration = doc.duration ? Number(doc.duration) : 1;\n\t\tdata.operationCount = doc.operationCount ? Number(doc.operationCount) : 1;\n\t\tdata.maxInvocationTime = doc.maxInvocationTime ? doc.maxInvocationTime : data.duration;\n\t\tdata.minInvocationTime = doc.minInvocationTime ? doc.minInvocationTime : data.duration;\n\t\t\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.callerHost);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}","reduce":"function(keys, values, rereduce){\n\tvar maxInvocationTime = Number(values[0].maxInvocationTime);\n\tvar minInvocationTime = Number(values[0].minInvocationTime);\n\tvar total = 0;\n\tvar numerator = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal += Number(values[i].operationCount);\n\t\tnumerator += Number(values[i].operationCount) * Number(values[i].duration);\n\t\tif(maxInvocationTime<=values[i].maxInvocationTime){\n\t\t\tmaxInvocationTime = values[i].maxInvocationTime;\n\t\t}\n\t\tif(minInvocationTime>=values[i].minInvocationTime){\n\t\t\tminInvocationTime = values[i].minInvocationTime;\n\t\t}\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.duration = Number(numerator)/Number(total);\n\tret.maxInvocationTime = Number(maxInvocationTime);\n\tret.minInvocationTime = Number(minInvocationTime);\n\n\treturn ret;\n}"},"calledMethod":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"ServiceUsageRecord\" || doc.recordType == \"ServiceUsageRecord\"){\n\t\tif((doc.duration && isNaN(Number(doc.duration))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\n\t\tvar data = {};\n\t\tdata.duration = doc.duration ? Number(doc.duration) : 1;\n\t\tdata.operationCount = doc.operationCount ? Number(doc.operationCount) : 1;\n\t\tdata.maxInvocationTime = doc.maxInvocationTime ? doc.maxInvocationTime : data.duration;\n\t\tdata.minInvocationTime = doc.minInvocationTime ? doc.minInvocationTime : data.duration;\n\t\t\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.calledMethod);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}","reduce":"function(keys, values, rereduce){\n\tvar maxInvocationTime = Number(values[0].maxInvocationTime);\n\tvar minInvocationTime = Number(values[0].minInvocationTime);\n\tvar total = 0;\n\tvar numerator = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal += Number(values[i].operationCount);\n\t\tnumerator += Number(values[i].operationCount) * Number(values[i].duration);\n\t\tif(maxInvocationTime<=values[i].maxInvocationTime){\n\t\t\tmaxInvocationTime = values[i].maxInvocationTime;\n\t\t}\n\t\tif(minInvocationTime>=values[i].minInvocationTime){\n\t\t\tminInvocationTime = values[i].minInvocationTime;\n\t\t}\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.duration = Number(numerator)/Number(total);\n\tret.maxInvocationTime = Number(maxInvocationTime);\n\tret.minInvocationTime = Number(minInvocationTime);\n\n\treturn ret;\n}"},"operationResult":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"ServiceUsageRecord\" || doc.recordType == \"ServiceUsageRecord\"){\n\t\tif((doc.duration && isNaN(Number(doc.duration))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\n\t\tvar data = {};\n\t\tdata.duration = doc.duration ? Number(doc.duration) : 1;\n\t\tdata.operationCount = doc.operationCount ? Number(doc.operationCount) : 1;\n\t\tdata.maxInvocationTime = doc.maxInvocationTime ? doc.maxInvocationTime : data.duration;\n\t\tdata.minInvocationTime = doc.minInvocationTime ? doc.minInvocationTime : data.duration;\n\t\t\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.operationResult);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}","reduce":"function(keys, values, rereduce){\n\tvar maxInvocationTime = Number(values[0].maxInvocationTime);\n\tvar minInvocationTime = Number(values[0].minInvocationTime);\n\tvar total = 0;\n\tvar numerator = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal += Number(values[i].operationCount);\n\t\tnumerator += Number(values[i].operationCount) * Number(values[i].duration);\n\t\tif(maxInvocationTime<=values[i].maxInvocationTime){\n\t\t\tmaxInvocationTime = values[i].maxInvocationTime;\n\t\t}\n\t\tif(minInvocationTime>=values[i].minInvocationTime){\n\t\t\tminInvocationTime = values[i].minInvocationTime;\n\t\t}\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.duration = Number(numerator)/Number(total);\n\tret.maxInvocationTime = Number(maxInvocationTime);\n\tret.minInvocationTime = Number(minInvocationTime);\n\n\treturn ret;\n}"},"serviceName":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"ServiceUsageRecord\" || doc.recordType == \"ServiceUsageRecord\"){\n\t\tif((doc.duration && isNaN(Number(doc.duration))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\n\t\tvar data = {};\n\t\tdata.duration = doc.duration ? Number(doc.duration) : 1;\n\t\tdata.operationCount = doc.operationCount ? Number(doc.operationCount) : 1;\n\t\tdata.maxInvocationTime = doc.maxInvocationTime ? doc.maxInvocationTime : data.duration;\n\t\tdata.minInvocationTime = doc.minInvocationTime ? doc.minInvocationTime : data.duration;\n\t\t\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.serviceName);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}","reduce":"function(keys, values, rereduce){\n\tvar maxInvocationTime = Number(values[0].maxInvocationTime);\n\tvar minInvocationTime = Number(values[0].minInvocationTime);\n\tvar total = 0;\n\tvar numerator = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal += Number(values[i].operationCount);\n\t\tnumerator += Number(values[i].operationCount) * Number(values[i].duration);\n\t\tif(maxInvocationTime<=values[i].maxInvocationTime){\n\t\t\tmaxInvocationTime = values[i].maxInvocationTime;\n\t\t}\n\t\tif(minInvocationTime>=values[i].minInvocationTime){\n\t\t\tminInvocationTime = values[i].minInvocationTime;\n\t\t}\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.duration = Number(numerator)/Number(total);\n\tret.maxInvocationTime = Number(maxInvocationTime);\n\tret.minInvocationTime = Number(minInvocationTime);\n\n\treturn ret;\n}"},"serviceClass__serviceName":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"ServiceUsageRecord\" || doc.recordType == \"ServiceUsageRecord\"){\n\t\tif((doc.duration && isNaN(Number(doc.duration))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\n\t\tvar data = {};\n\t\tdata.duration = doc.duration ? Number(doc.duration) : 1;\n\t\tdata.operationCount = doc.operationCount ? Number(doc.operationCount) : 1;\n\t\tdata.maxInvocationTime = doc.maxInvocationTime ? doc.maxInvocationTime : data.duration;\n\t\tdata.minInvocationTime = doc.minInvocationTime ? doc.minInvocationTime : data.duration;\n\t\t\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.serviceClass);\n\t\tdataKey.unshift(doc.serviceName);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}","reduce":"function(keys, values, rereduce){\n\tvar maxInvocationTime = Number(values[0].maxInvocationTime);\n\tvar minInvocationTime = Number(values[0].minInvocationTime);\n\tvar total = 0;\n\tvar numerator = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal += Number(values[i].operationCount);\n\t\tnumerator += Number(values[i].operationCount) * Number(values[i].duration);\n\t\tif(maxInvocationTime<=values[i].maxInvocationTime){\n\t\t\tmaxInvocationTime = values[i].maxInvocationTime;\n\t\t}\n\t\tif(minInvocationTime>=values[i].minInvocationTime){\n\t\t\tminInvocationTime = values[i].minInvocationTime;\n\t\t}\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.duration = Number(numerator)/Number(total);\n\tret.maxInvocationTime = Number(maxInvocationTime);\n\tret.minInvocationTime = Number(minInvocationTime);\n\n\treturn ret;\n}"}}},
{"_id":"_design/ServiceUsageRecordValues","language":"javascript","views":{"calledMethod":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"ServiceUsageRecord\" || doc.recordType == \"ServiceUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.calledMethod);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"},"callerHost":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"ServiceUsageRecord\" || doc.recordType == \"ServiceUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.callerHost);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"},"consumerId":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"ServiceUsageRecord\" || doc.recordType == \"ServiceUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.consumerId);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"},"host":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"ServiceUsageRecord\" || doc.recordType == \"ServiceUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.host);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"},"operationResult":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"ServiceUsageRecord\" || doc.recordType == \"ServiceUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.operationResult);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"},"serviceClass":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"ServiceUsageRecord\" || doc.recordType == \"ServiceUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.serviceClass);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"},"serviceName":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"ServiceUsageRecord\" || doc.recordType == \"ServiceUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.serviceName);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"}}},
{"_id":"_design/StorageUsageRecord","language":"javascript","views":{"all":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tif((doc.dataVolume && isNaN(Number(doc.dataVolume))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\t\tvar data = {};\n\t\tdata.dataVolume = doc.dataVolume ? Number(doc.dataVolume) : 0;\n\t\tdata.operationCount = doc.operationCount ? Number(doc.operationCount) : 1;\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}\n\n","reduce":"function(keys, values, rereduce){\n\tvar total = 0;\n\tvar dataVolume = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal = Number(total) + Number(values[i].operationCount);\n\t\tdataVolume = Number(dataVolume) + Number(values[i].dataVolume);\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.dataVolume = Number(dataVolume);\n\n\treturn ret;\n}"},"resourceScope":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tif((doc.dataVolume && isNaN(Number(doc.dataVolume))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\t\tvar data = {};\n\t\tdata.dataVolume = doc.dataVolume ? Number(doc.dataVolume) : 0;\n\t\tdata.operationCount = doc.operationCount ? parseInt(doc.operationCount) : 1;\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.resourceScope);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}\n\n","reduce":"function(keys, values, rereduce){\n\tvar total = 0;\n\tvar dataVolume = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal = Number(total) + Number(values[i].operationCount);\n\t\tdataVolume = Number(dataVolume) + Number(values[i].dataVolume);\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.dataVolume = Number(dataVolume);\n\n\treturn ret;\n}"},"consumerId":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tif((doc.dataVolume && isNaN(Number(doc.dataVolume))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\t\tvar data = {};\n\t\tdata.dataVolume = doc.dataVolume ? Number(doc.dataVolume) : 0;\n\t\tdata.operationCount = doc.operationCount ? Number(doc.operationCount) : 1;\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.consumerId);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}\n\n","reduce":"function(keys, values, rereduce){\n\tvar total = 0;\n\tvar dataVolume = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal = Number(total) + Number(values[i].operationCount);\n\t\tdataVolume = Number(dataVolume) + Number(values[i].dataVolume);\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.dataVolume = Number(dataVolume);\n\n\treturn ret;\n}"},"dataType":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tif((doc.dataVolume && isNaN(Number(doc.dataVolume))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\t\tvar data = {};\n\t\tdata.dataVolume = doc.dataVolume ? Number(doc.dataVolume) : 0;\n\t\tdata.operationCount = doc.operationCount ? parseInt(doc.operationCount) : 1;\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.dataType);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}\n\n\n","reduce":"function(keys, values, rereduce){\n\tvar total = 0;\n\tvar dataVolume = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal = Number(total) + Number(values[i].operationCount);\n\t\tdataVolume = Number(dataVolume) + Number(values[i].dataVolume);\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.dataVolume = Number(dataVolume);\n\n\treturn ret;\n}"},"resourceOwner":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tif((doc.dataVolume && isNaN(Number(doc.dataVolume))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\t\tvar data = {};\n\t\tdata.dataVolume = doc.dataVolume ? Number(doc.dataVolume) : 0;\n\t\tdata.operationCount = doc.operationCount ? parseInt(doc.operationCount) : 1;\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.resourceOwner);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}\n\n","reduce":"function(keys, values, rereduce){\n\tvar total = 0;\n\tvar dataVolume = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal = Number(total) + Number(values[i].operationCount);\n\t\tdataVolume = Number(dataVolume) + Number(values[i].dataVolume);\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.dataVolume = Number(dataVolume);\n\n\treturn ret;\n}"},"operationResult":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tif((doc.dataVolume && isNaN(Number(doc.dataVolume))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\t\tvar data = {};\n\t\tdata.dataVolume = doc.dataVolume ? Number(doc.dataVolume) : 0;\n\t\tdata.operationCount = doc.operationCount ? parseInt(doc.operationCount) : 1;\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.operationResult);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}\n\n","reduce":"function(keys, values, rereduce){\n\tvar total = 0;\n\tvar dataVolume = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal = Number(total) + Number(values[i].operationCount);\n\t\tdataVolume = Number(dataVolume) + Number(values[i].dataVolume);\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.dataVolume = Number(dataVolume);\n\n\treturn ret;\n}"},"resourceURI":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tif((doc.dataVolume && isNaN(Number(doc.dataVolume))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\t\tvar data = {};\n\t\tdata.dataVolume = doc.dataVolume ? Number(doc.dataVolume) : 0;\n\t\tdata.operationCount = doc.operationCount ? parseInt(doc.operationCount) : 1;\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.resourceURI);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}\n\n","reduce":"function(keys, values, rereduce){\n\tvar total = 0;\n\tvar dataVolume = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal = Number(total) + Number(values[i].operationCount);\n\t\tdataVolume = Number(dataVolume) + Number(values[i].dataVolume);\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.dataVolume = Number(dataVolume);\n\n\treturn ret;\n}"},"operationType":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tif((doc.dataVolume && isNaN(Number(doc.dataVolume))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\t\tvar data = {};\n\t\tdata.dataVolume = doc.dataVolume ? Number(doc.dataVolume) : 0;\n\t\tdata.operationCount = doc.operationCount ? parseInt(doc.operationCount) : 1;\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.operationType);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}\n\n","reduce":"function(keys, values, rereduce){\n\tvar total = 0;\n\tvar dataVolume = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal = Number(total) + Number(values[i].operationCount);\n\t\tdataVolume = Number(dataVolume) + Number(values[i].dataVolume);\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.dataVolume = Number(dataVolume);\n\n\treturn ret;\n}"},"providerURI":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tif((doc.dataVolume && isNaN(Number(doc.dataVolume))) || (doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\t\tvar data = {};\n\t\tdata.dataVolume = doc.dataVolume ? Number(doc.dataVolume) : 0;\n\t\tdata.operationCount = doc.operationCount ? parseInt(doc.operationCount) : 1;\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.providerURI);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}\n\n","reduce":"function(keys, values, rereduce){\n\tvar total = 0;\n\tvar dataVolume = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal = Number(total) + Number(values[i].operationCount);\n\t\tdataVolume = Number(dataVolume) + Number(values[i].dataVolume);\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\tret.dataVolume = Number(dataVolume);\n\n\treturn ret;\n}"}}},
{"_id":"_design/StorageUsageRecordValues","language":"javascript","views":{"consumerId":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.consumerId);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"},"dataType":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.dataType);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"},"operationResult":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.operationResult);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"},"operationType":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.operationType);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"},"providerURI":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.providerURI);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"},"resourceOwner":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.resourceOwner);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"},"resourceURI":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.resourceURI);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"},"resourceScope":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"StorageUsageRecord\" || doc.recordType == \"StorageUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.resourceScope);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"}}},
{"_id":"_design/TaskUsageRecord","language":"javascript","views":{"all":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"TaskUsageRecord\" || doc.recordType == \"TaskUsageRecord\"){\n\t\tif((doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\t\tvar data = {};\n\t\tdata.operationCount = doc.operationCount ? Number(doc.operationCount) : 1;\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}\n","reduce":"function(keys, values, rereduce){\n\tvar total = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal = Number(total) + Number(values[i].operationCount);\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\t\n\treturn ret;\n}"},"consumerId":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"TaskUsageRecord\" || doc.recordType == \"TaskUsageRecord\"){\n\t\tif((doc.operationCount && isNaN(Number(doc.operationCount)))){\n\t\t\temit([0, \"Invalid Value\", doc.id], doc);\n\t\t\treturn;\n\t\t}\n\t\tvar data = {};\n\t\tdata.operationCount = doc.operationCount ? Number(doc.operationCount) : 1;\n\t\tvar dataKey = getDataKey(Number(doc.creationTime));\n\t\tdataKey.unshift(doc.consumerId);\n\t\tdataKey.unshift(doc.scope);\n\t\temit(dataKey, data);\n\t}\n}\n\n\nfunction getDataKey(timestamp){\n\tvar date = new Date(timestamp);\n\tvar key = [];\n\tkey.push(date.getUTCFullYear());\n\tkey.push(date.getUTCMonth()+1);\n\tkey.push(date.getUTCDate());\n\tkey.push(date.getUTCHours());\n\tkey.push(date.getUTCMinutes());\n\tkey.push(date.getUTCSeconds());\n\tkey.push(date.getUTCMilliseconds());\n\treturn key;\n}\n","reduce":"function(keys, values, rereduce){\n\tvar total = 0;\n\tfor(i=0; i<values.length; i++){\n\t\ttotal = Number(total) + Number(values[i].operationCount);\n\t}\n\t\n\tret = {};\n\tret.operationCount = Number(total);\n\t\n\treturn ret;\n}"}}},
{"_id":"_design/TaskUsageRecordValues","language":"javascript","views":{"consumerId":{"map":"function(doc) {\n\tif(doc.usageRecordType == \"TaskUsageRecord\" || doc.recordType == \"TaskUsageRecord\"){\n\t\tvar emitKey = [];\n\t\temitKey.push(doc.scope);\n\t\temitKey.push(doc.consumerId);\n\t\temit(emitKey, doc.operationCount ? Number(doc.operationCount) : 1);\n\t}\n}","reduce":"function(keys, values, rereduce){\n\treturn sum(values);\n}"}}},
{"_id":"_design/invalid","language":"javascript","views":{"invalid":{"map":"function(doc) {\n\tif(!doc.usageRecordType && !doc.recordType){\n\t\temit([0, \"No Record Type\", doc.id], doc);\n\t\treturn;\n\t}\n}"}}}
]}

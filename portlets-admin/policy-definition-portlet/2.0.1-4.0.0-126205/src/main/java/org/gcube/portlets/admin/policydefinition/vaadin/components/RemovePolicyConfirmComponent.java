package org.gcube.portlets.admin.policydefinition.vaadin.components;

import java.util.Collection;

import org.gcube.portlets.admin.policydefinition.common.util.PresentationHelper;
import org.gcube.portlets.admin.policydefinition.services.restful.RestfulClient;
import org.gcube.portlets.admin.policydefinition.services.restful.RestfulResponseException;
import org.gcube.portlets.admin.policydefinition.vaadin.listeners.CloseButtonListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.Notification;

public class RemovePolicyConfirmComponent extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button no;
	@AutoGenerated
	private Button yes;
	@AutoGenerated
	private Label message;
	
	private static Logger logger = LoggerFactory.getLogger(RemovePolicyConfirmComponent.class);
	private static final long serialVersionUID = 2204633067702963159L;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public RemovePolicyConfirmComponent(final Table policies) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		message.setValue("Are you sure you want to delete the selected "+PresentationHelper.getPolicyNoun(policies)+"?");
		no.addListener(new CloseButtonListener());
		yes.focus();
		yes.addListener(new Button.ClickListener() {
			
			private static final long serialVersionUID = 4887079188923044390L;

			@Override
			public void buttonClick(ClickEvent event) {
				if(policies.getValue() instanceof Collection<?>){
					Window window = event.getComponent().getWindow();
					Window mainWindow = event.getComponent().getApplication().getMainWindow();
					Collection<?> policieValues = (Collection<?>)policies.getValue();
					for (Object policy : policieValues) {
						try {
							RestfulClient.getInstance().deleteRule((String)policy);
							policies.removeItem(policy);					
						} catch (RestfulResponseException e) {	
							logger.error("Error deleting policy", e);
							mainWindow.showNotification("Internal server error removing policy", Notification.TYPE_ERROR_MESSAGE);	
						}
					}				
					mainWindow.showNotification("Removed "+policieValues.size()+" "+PresentationHelper.getPolicyNoun(policies)+" succesfully", Notification.POSITION_CENTERED);	
					mainWindow.removeWindow(window);
				}
			}
		});
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("320px");
		mainLayout.setHeight("100px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("320px");
		setHeight("100px");
		
		// message
		message = new Label();
		message.setImmediate(false);
		message.setWidth("-1px");
		message.setHeight("-1px");
		mainLayout.addComponent(message, "top:20.0px;left:20.0px;");
		
		// yes
		yes = new Button();
		yes.setCaption("Yes");
		yes.setImmediate(true);
		yes.setWidth("-1px");
		yes.setHeight("-1px");
		mainLayout.addComponent(yes, "top:40.0px;left:74.0px;");
		
		// no
		no = new Button();
		no.setCaption("No");
		no.setImmediate(true);
		no.setWidth("-1px");
		no.setHeight("-1px");
		mainLayout.addComponent(no, "top:40.0px;left:160.0px;");
		
		return mainLayout;
	}

}

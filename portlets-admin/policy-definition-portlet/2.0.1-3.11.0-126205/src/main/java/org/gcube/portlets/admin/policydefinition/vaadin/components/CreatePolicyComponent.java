package org.gcube.portlets.admin.policydefinition.vaadin.components;

import org.gcube.portlets.admin.policydefinition.common.util.PresentationHelper;
import org.gcube.portlets.admin.policydefinition.common.util.TimeFormatHelper;
import org.gcube.portlets.admin.policydefinition.vaadin.containers.HostsContainer;
import org.gcube.portlets.admin.policydefinition.vaadin.containers.RolesContainer;
import org.gcube.portlets.admin.policydefinition.vaadin.listeners.CloseButtonListener;
import org.gcube.portlets.admin.policydefinition.vaadin.listeners.CreatePolicyButtonListener;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.validator.RegexpValidator;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextField;

public class CreatePolicyComponent extends CustomComponent {

	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private ListSelect categorySelect;

	@AutoGenerated
	private TextField endTimeTextField;

	@AutoGenerated
	private TextField startTimeTextField;

	@AutoGenerated
	private PopupDateField endPopupDateField;

	@AutoGenerated
	private PopupDateField startPopupDateField;

	@AutoGenerated
	private ListSelect roleslistSelect;

	@AutoGenerated
	private ListSelect hostListSelect;

	@AutoGenerated
	private CheckBox permit;

	@AutoGenerated
	private Button close;

	@AutoGenerated
	private Button create;

	private static final long serialVersionUID = 3382888466608001526L;
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 * @throws Exception 
	 */
	public CreatePolicyComponent(String service) throws Exception {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		String[] name = PresentationHelper.splitNameHepler(service);
		hostListSelect.setContainerDataSource(HostsContainer.getHostsContainer(name[1], name[0]));
		
		roleslistSelect.setRequired(true);
		roleslistSelect.setRequiredError("Role and/or Service Category are required");
		roleslistSelect.setImmediate(true);
		roleslistSelect.setMultiSelect(true);		
		roleslistSelect.setContainerDataSource(RolesContainer.getOnlyRoles());

		categorySelect.setRequired(true);
		categorySelect.setRequiredError("Role and/or Service Category are required");
		categorySelect.setImmediate(true);
		categorySelect.setMultiSelect(true);		
		categorySelect.setContainerDataSource(RolesContainer.getOnlyServiceCategory());
		
		hostListSelect.setImmediate(false);
		hostListSelect.setMultiSelect(true);
		
		startTimeTextField.addValidator(new RegexpValidator(TimeFormatHelper.TIME_REGEX, true,
                "{0} does not match the right format"));
		endTimeTextField.addValidator(new RegexpValidator(TimeFormatHelper.TIME_REGEX, true,
                "{0} does not match the right format"));

		startPopupDateField.setDateFormat("dd/MM/yyyy");
		startPopupDateField.setInputPrompt("dd/MM/yyyy");
		endPopupDateField.setDateFormat("dd/MM/yyyy");
		endPopupDateField.setInputPrompt("dd/MM/yyyy");
		
		close.addListener(new CloseButtonListener());
		
		create.focus();
		create.addListener(
				new CreatePolicyButtonListener(
						service, 
						roleslistSelect, 
						categorySelect,
						hostListSelect, 
						startTimeTextField, 
						endTimeTextField, 
						startPopupDateField,
						endPopupDateField,
						permit));
				
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("680px");
		mainLayout.setHeight("440px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("680px");
		setHeight("440px");
		
		// create
		create = new Button();
		create.setCaption("Create policy");
		create.setImmediate(true);
		create.setWidth("120px");
		create.setHeight("26px");
		mainLayout.addComponent(create, "bottom:19.0px;left:464.0px;");
		
		// close
		close = new Button();
		close.setCaption("Close");
		close.setImmediate(true);
		close.setWidth("61px");
		close.setHeight("-1px");
		mainLayout.addComponent(close, "right:19.0px;bottom:18.0px;");
		
		// permit
		permit = new CheckBox();
		permit.setCaption("Permit");
		permit.setImmediate(false);
		permit.setWidth("-1px");
		permit.setHeight("-1px");
		mainLayout.addComponent(permit, "top:360.0px;left:564.0px;");
		
		// hostListSelect
		hostListSelect = new ListSelect();
		hostListSelect
				.setCaption("gHNs (hold down Ctrl or Shift key for multiple selections, no selection for all gHNs)");
		hostListSelect.setImmediate(false);
		hostListSelect.setWidth("100.0%");
		hostListSelect.setHeight("100.0%");
		mainLayout.addComponent(hostListSelect,
				"top:20.0px;right:23.0px;bottom:260.0px;left:20.0px;");
		
		// roleslistSelect
		roleslistSelect = new ListSelect();
		roleslistSelect.setCaption("Roles (multi selection allowed)");
		roleslistSelect.setImmediate(false);
		roleslistSelect.setWidth("100.0%");
		roleslistSelect.setHeight("100.0%");
		mainLayout.addComponent(roleslistSelect,
				"top:200.0px;right:440.0px;bottom:60.0px;left:20.0px;");
		
		// startPopupDateField
		startPopupDateField = new PopupDateField();
		startPopupDateField.setCaption("Start date");
		startPopupDateField.setImmediate(false);
		startPopupDateField.setWidth("-1px");
		startPopupDateField.setHeight("-1px");
		startPopupDateField.setResolution(4);
		mainLayout.addComponent(startPopupDateField,
				"top:280.0px;left:563.0px;");
		
		// endPopupDateField
		endPopupDateField = new PopupDateField();
		endPopupDateField.setCaption("End date");
		endPopupDateField.setImmediate(false);
		endPopupDateField.setWidth("-1px");
		endPopupDateField.setHeight("-1px");
		endPopupDateField.setResolution(4);
		mainLayout.addComponent(endPopupDateField, "top:320.0px;left:564.0px;");
		
		// startTimeTextField
		startTimeTextField = new TextField();
		startTimeTextField.setCaption("Start time range (hh:mm)");
		startTimeTextField.setImmediate(true);
		startTimeTextField.setWidth("-1px");
		startTimeTextField.setHeight("-1px");
		mainLayout
				.addComponent(startTimeTextField, "top:200.0px;left:525.0px;");
		
		// endTimeTextField
		endTimeTextField = new TextField();
		endTimeTextField.setCaption("End time range (hh:mm)");
		endTimeTextField.setImmediate(true);
		endTimeTextField.setWidth("-1px");
		endTimeTextField.setHeight("-1px");
		mainLayout.addComponent(endTimeTextField, "top:240.0px;left:526.0px;");
		
		// categorySelect
		categorySelect = new ListSelect();
		categorySelect
				.setCaption("Service Categories (multi selection allowed)");
		categorySelect.setImmediate(false);
		categorySelect.setWidth("100.0%");
		categorySelect.setHeight("100.0%");
		mainLayout.addComponent(categorySelect,
				"top:200.0px;right:200.0px;bottom:61.0px;left:260.0px;");
		
		return mainLayout;
	}

}

/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. gCQLParser.jj */
/*@egen*//* gCQLParser.jjt */

/* @author Rena Tsantouli */
/* This file parses the gCQL language and creates a query tree */

options{
  STATIC = false;
}

/* *** Specification of the parser class *** */
PARSER_BEGIN(gCQLParser)

package search.library.util.cql.parser;

import java.util.*;

public class gCQLParser/*@bgen(jjtree)*/implements gCQLParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTgCQLParserState jjtree = new JJTgCQLParserState();

/*@egen*/}

PARSER_END(gCQLParser)


/* *** Token Specification *** */

/* Skip whitespace */
SKIP :
{  " "|"\t"|"\n"|"\r"|","}
/* Reserved words - ignoring case */
TOKEN[IGNORE_CASE]:
{  < SORTBY:"sortby" >
| < PROJECT:"project" >
| < FUSE:"fuse" >
| < AND:"and" >
| < OR:"or" >
| < NOT:"not" >
| < PROX:"prox" >
| < LPAREN:"(" >
| < RPAREN:")" >
| < EQUALS:"=" >
| < GREATER:">" >
| < LESS:"<" >
| < GEQUAL:">=" >
| < LEQUAL:"<=" >
| < NOTEQUAL:"<>" >
| < EXACT:"==" >
| < SLASH:"/" >
| < CHARSTRING1:(["A"-"Z","0"-"9","_",".","-",":","*","&",";","\u00bf"-"\u00ff", "\u0100"-"\uffff"])+ >
| < CHARSTRING2:("\""(["A"-"Z","0"-"9","_",".","(",")","'"," ","<",">","/",":","-","*","&",";","+","=","%", "\u00bf"-"\u00ff", "\u0100"-"\uffff"])+)"\"" >
| < STAR:"#" >
/*| < ESCAPEDDQUOTES:"\\\"" >*/
| < DOUBLEQUOTES:"\"" >}





/* *** Context-free grammar (EBNF) *** */
/* Note: In the start nonterminal, the action "return jjtThis" instructs
JavaCC to return the resulting parse tree from the generated parsing
method. Therefore, the start nonterminal has a result type (SimpleNode).
All other nonterminals have no result type (void).
*/

/* Start the nonterminal and its productions. */
SimpleNode Start() :{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}    // Start - > gCQLQuery{/*@bgen(jjtree) Start */
  try {
/*@egen*/  gCQLQuery()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

	/* Other nonterminals and their productions */
	/*void gCQLQuery():	{	}	{
	  LOOKAHEAD(2)	  < STAR > (PrefixAssignment() gCQLQuery() |
	  ScopedClause() [SortSpec()] [ProjectSpec()]) <STAR >
	  |< STAR > <DOUBLEQUOTES > <DOUBLEQUOTES > <STAR >	}*/

		/* Other nonterminals and their productions */
	void gCQLQuery():
	{/*@bgen(jjtree) gCQLQuery */
  SimpleNode jjtn000 = new SimpleNode(JJTGCQLQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
	}
	{/*@bgen(jjtree) gCQLQuery */
          try {
/*@egen*/
	  LOOKAHEAD(2)
	  < STAR > (PrefixAssignment() CQLQuery() |
	  ScopedClause() [SortSpec()] [ProjectSpec()] [FuseSpec()]) <STAR >
	  |< STAR > <DOUBLEQUOTES > <DOUBLEQUOTES > <STAR >/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 
	}
	void SortSpec():	{/*@bgen(jjtree) SortSpec */
  SimpleNode jjtn000 = new SimpleNode(JJTSORTSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/	}	{/*@bgen(jjtree) SortSpec */
          try {
/*@egen*/	  < SORTBY > SingleSpec() [(SingleSpec())+]/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/	}

	void ProjectSpec():	{/*@bgen(jjtree) ProjectSpec */
  SimpleNode jjtn000 = new SimpleNode(JJTPROJECTSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/	}	{/*@bgen(jjtree) ProjectSpec */
          try {
/*@egen*/	  < PROJECT > SingleSpec() [(SingleSpec())+]/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/	}		void FuseSpec():
	{/*@bgen(jjtree) FuseSpec */
  SimpleNode jjtn000 = new SimpleNode(JJTFUSESPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
	}
	{/*@bgen(jjtree) FuseSpec */
          try {
/*@egen*/
	  < FUSE > SingleSpec() [(SingleSpec())]/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
	}

	void SingleSpec():	{/*@bgen(jjtree) SingleSpec */
  SimpleNode jjtn000 = new SimpleNode(JJTSINGLESPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/	}	{/*@bgen(jjtree) SingleSpec */
          try {
/*@egen*/	  Index() [ModifierList()]/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/	}
	void CQLQuery():	{/*@bgen(jjtree) CQLQuery */
  SimpleNode jjtn000 = new SimpleNode(JJTCQLQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/	}	{/*@bgen(jjtree) CQLQuery */
          try {
/*@egen*/	  PrefixAssignment() CQLQuery() | ScopedClause()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/	}
/* TODO: case without prefix not defined here */
void PrefixAssignment():{/*@bgen(jjtree) PrefixAssignment */
  SimpleNode jjtn000 = new SimpleNode(JJTPREFIXASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PrefixAssignment */
  try {
/*@egen*/  < GREATER > Prefix() < EQUALS > URI()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void ScopedClause():{/*@bgen(jjtree) ScopedClause */
  SimpleNode jjtn000 = new SimpleNode(JJTSCOPEDCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ScopedClause */
  try {
/*@egen*/  SearchClause() [(BooleanGroup() SearchClause())+]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  }
void BooleanGroup():{/*@bgen(jjtree) BooleanGroup */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEANGROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BooleanGroup */
  try {
/*@egen*/  Boolean() [ModifierList()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void Boolean():{/*@bgen(jjtree) Boolean */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token bool = null;}{/*@bgen(jjtree) Boolean */
  try {
/*@egen*/
  (    bool = < AND > | bool = < OR > | bool = < NOT > | bool = < PROX >)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {      jjtn000.setText(bool.image);    }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/    }

/* Here if we have a relation and a second term, then the fist term is an index. In other case it's a searchTerm */
/*void SearchClause():{}{  < LPAREN > CQLQuery() < RPAREN > | Term() [Relation() SearchTerm()]} */

void SearchClause():{/*@bgen(jjtree) SearchClause */
  SimpleNode jjtn000 = new SimpleNode(JJTSEARCHCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SearchClause */
  try {
/*@egen*/
    < LPAREN > CQLQuery() < RPAREN > |
  LOOKAHEAD(2)
   Index() Relation() SearchTerm() | SearchTerm()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void Relation():{/*@bgen(jjtree) Relation */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String rel = null;}{/*@bgen(jjtree) Relation */
 try {
/*@egen*/ Comparitor() [ModifierList()]/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/  }
String Comparitor():{/*@bgen(jjtree) Comparitor */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARITOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String comp = null;}{/*@bgen(jjtree) Comparitor */
  try {
/*@egen*/
  (  comp = ComparitorSymbol() | comp = NamedComparitor())/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {
    jjtn000.setText(comp);    return comp;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  }

String ComparitorSymbol():{/*@bgen(jjtree) ComparitorSymbol */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARITORSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token comp = null;
  String compS = null;}{/*@bgen(jjtree) ComparitorSymbol */
   try {
/*@egen*/     (      comp = < EQUALS > | comp = < GREATER > | comp = < LESS > | comp = < GEQUAL > | comp = < LEQUAL > | comp = < NOTEQUAL > | comp = < EXACT >)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setText(comp.image);
    compS = comp.image;
    return compS;  }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/  }
String NamedComparitor():{/*@bgen(jjtree) NamedComparitor */
  SimpleNode jjtn000 = new SimpleNode(JJTNAMEDCOMPARITOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String comp = null;}{/*@bgen(jjtree) NamedComparitor */
  try {
/*@egen*/  comp = Identifier()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setText(comp);    return comp;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  }
void ModifierList():{/*@bgen(jjtree) ModifierList */
  SimpleNode jjtn000 = new SimpleNode(JJTMODIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ModifierList */
  try {
/*@egen*/  Modifier() [(Modifier())+]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void Modifier():{/*@bgen(jjtree) Modifier */
  SimpleNode jjtn000 = new SimpleNode(JJTMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Modifier */
  try {
/*@egen*/  < SLASH > ModifierName() [ComparitorSymbol() ModifierValue()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void Prefix():{/*@bgen(jjtree) Prefix */
  SimpleNode jjtn000 = new SimpleNode(JJTPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String term = null;}{/*@bgen(jjtree) Prefix */
  try {
/*@egen*/  term = Term()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setText(term);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  }
void URI():{/*@bgen(jjtree) URI */
  SimpleNode jjtn000 = new SimpleNode(JJTURI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String uri = null;}{/*@bgen(jjtree) URI */
  try {
/*@egen*/  uri = Term()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setText(uri);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  }
void ModifierName():{/*@bgen(jjtree) ModifierName */
  SimpleNode jjtn000 = new SimpleNode(JJTMODIFIERNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String mdName = null;}{/*@bgen(jjtree) ModifierName */
  try {
/*@egen*/  mdName = Term()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setText(mdName);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  }
void ModifierValue():{/*@bgen(jjtree) ModifierValue */
  SimpleNode jjtn000 = new SimpleNode(JJTMODIFIERVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String mdValue = null;}{/*@bgen(jjtree) ModifierValue */
  try {
/*@egen*/  mdValue = Term()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setText(mdValue);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  }
void SearchTerm():{/*@bgen(jjtree) SearchTerm */
  SimpleNode jjtn000 = new SimpleNode(JJTSEARCHTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String st = null;}{/*@bgen(jjtree) SearchTerm */
  try {
/*@egen*/  st = Term()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {    jjtn000.setText(st);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  }

void Index():{/*@bgen(jjtree) Index */
  SimpleNode jjtn000 = new SimpleNode(JJTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String ind = null;}{/*@bgen(jjtree) Index */
  try {
/*@egen*/  ind = Term()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setText(ind);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  }
String Term():{/*@bgen(jjtree) Term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String id1 = null;
  Token id2 = null;}{/*@bgen(jjtree) Term */
  try {
/*@egen*/
  (      id1 = Identifier() | id2 = < AND > | id2 = < OR > | id2 = < NOT > | id2 = < PROX > | id2 = < SORTBY >)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/

  {    if (id1 == null)    {      id1 = id2.image;
      return id1;    }    else    {      return id1;    }  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
/* TODO: plus charstring2!! */
String Identifier():{/*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token id = null;
  String id2 = null;}{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/      /*( id = < CHARSTRING1 > | id2 = CharString2())*/
    (      id = < CHARSTRING1 > | id = < CHARSTRING2 >)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {
         jjtn000.setText(id.image);
         	return id.image; 	  }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}
/* TODO: What about escaped double quotes? -- not used */
 String CharString2():	{/*@bgen(jjtree) CharString2 */
          SimpleNode jjtn000 = new SimpleNode(JJTCHARSTRING2);
          boolean jjtc000 = true;
          jjtree.openNodeScope(jjtn000);
/*@egen*/
	  String str = null;
	  Token charStr = null;	}	{/*@bgen(jjtree) CharString2 */
          try {
/*@egen*/
	  	    	  < DOUBLEQUOTES > (charStr = <CHARSTRING2 >) <DOUBLEQUOTES >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  {	    str = "\"" + charStr.image + "\"";
	    return str;	  }/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/	  	}	


/* Generated By:JJTree&JavaCC: Do not edit this line. gCQLParser.java */
package search.library.util.cql.parser;

import java.util.*;

public class gCQLParser/*@bgen(jjtree)*/implements gCQLParserTreeConstants, gCQLParserConstants {/*@bgen(jjtree)*/
  protected JJTgCQLParserState jjtree = new JJTgCQLParserState();

/* *** Context-free grammar (EBNF) *** */
/* Note: In the start nonterminal, the action "return jjtThis" instructs
JavaCC to return the resulting parse tree from the generated parsing
method. Therefore, the start nonterminal has a result type (SimpleNode).
All other nonterminals have no result type (void).
*/

/* Start the nonterminal and its productions. */
  final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      gCQLQuery();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

        /* Other nonterminals and their productions */
        /*void gCQLQuery():	{	}	{
	  LOOKAHEAD(2)	  < STAR > (PrefixAssignment() gCQLQuery() |
	  ScopedClause() [SortSpec()] [ProjectSpec()]) <STAR >
	  |< STAR > <DOUBLEQUOTES > <DOUBLEQUOTES > <STAR >	}*/

                /* Other nonterminals and their productions */
  final public void gCQLQuery() throws ParseException {
         /*@bgen(jjtree) gCQLQuery */
  SimpleNode jjtn000 = new SimpleNode(JJTGCQLQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2)) {
        jj_consume_token(STAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GREATER:
          PrefixAssignment();
          CQLQuery();
          break;
        case SORTBY:
        case AND:
        case OR:
        case NOT:
        case PROX:
        case LPAREN:
        case CHARSTRING1:
        case CHARSTRING2:
          ScopedClause();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SORTBY:
            SortSpec();
            break;
          default:
            jj_la1[0] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROJECT:
            ProjectSpec();
            break;
          default:
            jj_la1[1] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FUSE:
            FuseSpec();
            break;
          default:
            jj_la1[2] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(STAR);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
          jj_consume_token(DOUBLEQUOTES);
          jj_consume_token(DOUBLEQUOTES);
          jj_consume_token(STAR);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void SortSpec() throws ParseException {
         /*@bgen(jjtree) SortSpec */
  SimpleNode jjtn000 = new SimpleNode(JJTSORTSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SORTBY);
      SingleSpec();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SORTBY:
      case AND:
      case OR:
      case NOT:
      case PROX:
      case CHARSTRING1:
      case CHARSTRING2:
        label_1:
        while (true) {
          SingleSpec();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SORTBY:
          case AND:
          case OR:
          case NOT:
          case PROX:
          case CHARSTRING1:
          case CHARSTRING2:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_1;
          }
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void ProjectSpec() throws ParseException {
         /*@bgen(jjtree) ProjectSpec */
  SimpleNode jjtn000 = new SimpleNode(JJTPROJECTSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PROJECT);
      SingleSpec();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SORTBY:
      case AND:
      case OR:
      case NOT:
      case PROX:
      case CHARSTRING1:
      case CHARSTRING2:
        label_2:
        while (true) {
          SingleSpec();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SORTBY:
          case AND:
          case OR:
          case NOT:
          case PROX:
          case CHARSTRING1:
          case CHARSTRING2:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_2;
          }
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void FuseSpec() throws ParseException {
         /*@bgen(jjtree) FuseSpec */
  SimpleNode jjtn000 = new SimpleNode(JJTFUSESPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUSE);
      SingleSpec();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SORTBY:
      case AND:
      case OR:
      case NOT:
      case PROX:
      case CHARSTRING1:
      case CHARSTRING2:
        SingleSpec();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void SingleSpec() throws ParseException {
         /*@bgen(jjtree) SingleSpec */
  SimpleNode jjtn000 = new SimpleNode(JJTSINGLESPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Index();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
        ModifierList();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void CQLQuery() throws ParseException {
         /*@bgen(jjtree) CQLQuery */
  SimpleNode jjtn000 = new SimpleNode(JJTCQLQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GREATER:
        PrefixAssignment();
        CQLQuery();
        break;
      case SORTBY:
      case AND:
      case OR:
      case NOT:
      case PROX:
      case LPAREN:
      case CHARSTRING1:
      case CHARSTRING2:
        ScopedClause();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

/* TODO: case without prefix not defined here */
  final public void PrefixAssignment() throws ParseException {
 /*@bgen(jjtree) PrefixAssignment */
  SimpleNode jjtn000 = new SimpleNode(JJTPREFIXASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GREATER);
      Prefix();
      jj_consume_token(EQUALS);
      URI();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ScopedClause() throws ParseException {
 /*@bgen(jjtree) ScopedClause */
  SimpleNode jjtn000 = new SimpleNode(JJTSCOPEDCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SearchClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case NOT:
      case PROX:
        label_3:
        while (true) {
          BooleanGroup();
          SearchClause();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
          case OR:
          case NOT:
          case PROX:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_3;
          }
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BooleanGroup() throws ParseException {
 /*@bgen(jjtree) BooleanGroup */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEANGROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Boolean();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
        ModifierList();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Boolean() throws ParseException {
 /*@bgen(jjtree) Boolean */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token bool = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        bool = jj_consume_token(AND);
        break;
      case OR:
        bool = jj_consume_token(OR);
        break;
      case NOT:
        bool = jj_consume_token(NOT);
        break;
      case PROX:
        bool = jj_consume_token(PROX);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setText(bool.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Here if we have a relation and a second term, then the fist term is an index. In other case it's a searchTerm */
/*void SearchClause():{}{  < LPAREN > CQLQuery() < RPAREN > | Term() [Relation() SearchTerm()]} */
  final public void SearchClause() throws ParseException {
 /*@bgen(jjtree) SearchClause */
  SimpleNode jjtn000 = new SimpleNode(JJTSEARCHCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        CQLQuery();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[16] = jj_gen;
        if (jj_2_2(2)) {
          Index();
          Relation();
          SearchTerm();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SORTBY:
          case AND:
          case OR:
          case NOT:
          case PROX:
          case CHARSTRING1:
          case CHARSTRING2:
            SearchTerm();
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Relation() throws ParseException {
 /*@bgen(jjtree) Relation */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String rel = null;
    try {
      Comparitor();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
        ModifierList();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public String Comparitor() throws ParseException {
 /*@bgen(jjtree) Comparitor */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARITOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String comp = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case GREATER:
      case LESS:
      case GEQUAL:
      case LEQUAL:
      case NOTEQUAL:
      case EXACT:
        comp = ComparitorSymbol();
        break;
      case CHARSTRING1:
      case CHARSTRING2:
        comp = NamedComparitor();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setText(comp);
    {if (true) return comp;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String ComparitorSymbol() throws ParseException {
 /*@bgen(jjtree) ComparitorSymbol */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARITORSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token comp = null;
  String compS = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        comp = jj_consume_token(EQUALS);
        break;
      case GREATER:
        comp = jj_consume_token(GREATER);
        break;
      case LESS:
        comp = jj_consume_token(LESS);
        break;
      case GEQUAL:
        comp = jj_consume_token(GEQUAL);
        break;
      case LEQUAL:
        comp = jj_consume_token(LEQUAL);
        break;
      case NOTEQUAL:
        comp = jj_consume_token(NOTEQUAL);
        break;
      case EXACT:
        comp = jj_consume_token(EXACT);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setText(comp.image);
    compS = comp.image;
    {if (true) return compS;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public String NamedComparitor() throws ParseException {
 /*@bgen(jjtree) NamedComparitor */
  SimpleNode jjtn000 = new SimpleNode(JJTNAMEDCOMPARITOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String comp = null;
    try {
      comp = Identifier();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setText(comp);
    {if (true) return comp;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ModifierList() throws ParseException {
 /*@bgen(jjtree) ModifierList */
  SimpleNode jjtn000 = new SimpleNode(JJTMODIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Modifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
        label_4:
        while (true) {
          Modifier();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SLASH:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_4;
          }
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Modifier() throws ParseException {
 /*@bgen(jjtree) Modifier */
  SimpleNode jjtn000 = new SimpleNode(JJTMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SLASH);
      ModifierName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case GREATER:
      case LESS:
      case GEQUAL:
      case LEQUAL:
      case NOTEQUAL:
      case EXACT:
        ComparitorSymbol();
        ModifierValue();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Prefix() throws ParseException {
 /*@bgen(jjtree) Prefix */
  SimpleNode jjtn000 = new SimpleNode(JJTPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String term = null;
    try {
      term = Term();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setText(term);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void URI() throws ParseException {
 /*@bgen(jjtree) URI */
  SimpleNode jjtn000 = new SimpleNode(JJTURI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String uri = null;
    try {
      uri = Term();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setText(uri);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ModifierName() throws ParseException {
 /*@bgen(jjtree) ModifierName */
  SimpleNode jjtn000 = new SimpleNode(JJTMODIFIERNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String mdName = null;
    try {
      mdName = Term();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setText(mdName);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ModifierValue() throws ParseException {
 /*@bgen(jjtree) ModifierValue */
  SimpleNode jjtn000 = new SimpleNode(JJTMODIFIERVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String mdValue = null;
    try {
      mdValue = Term();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setText(mdValue);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SearchTerm() throws ParseException {
 /*@bgen(jjtree) SearchTerm */
  SimpleNode jjtn000 = new SimpleNode(JJTSEARCHTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String st = null;
    try {
      st = Term();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setText(st);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Index() throws ParseException {
 /*@bgen(jjtree) Index */
  SimpleNode jjtn000 = new SimpleNode(JJTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String ind = null;
    try {
      ind = Term();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setText(ind);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String Term() throws ParseException {
 /*@bgen(jjtree) Term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String id1 = null;
  Token id2 = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARSTRING1:
      case CHARSTRING2:
        id1 = Identifier();
        break;
      case AND:
        id2 = jj_consume_token(AND);
        break;
      case OR:
        id2 = jj_consume_token(OR);
        break;
      case NOT:
        id2 = jj_consume_token(NOT);
        break;
      case PROX:
        id2 = jj_consume_token(PROX);
        break;
      case SORTBY:
        id2 = jj_consume_token(SORTBY);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (id1 == null)
    {
      id1 = id2.image;
      {if (true) return id1;}
    }
    else
    {
      {if (true) return id1;}
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* TODO: plus charstring2!! */
  final public String Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token id = null;
  String id2 = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARSTRING1:
        id = jj_consume_token(CHARSTRING1);
        break;
      case CHARSTRING2:
        id = jj_consume_token(CHARSTRING2);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
         jjtn000.setText(id.image);
                {if (true) return id.image;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

/* TODO: What about escaped double quotes? -- not used */
  final public String CharString2() throws ParseException {
         /*@bgen(jjtree) CharString2 */
          SimpleNode jjtn000 = new SimpleNode(JJTCHARSTRING2);
          boolean jjtc000 = true;
          jjtree.openNodeScope(jjtn000);String str = null;
          Token charStr = null;
    try {
      jj_consume_token(DOUBLEQUOTES);
      charStr = jj_consume_token(CHARSTRING2);
      jj_consume_token(DOUBLEQUOTES);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            str = "\u005c"" + charStr.image + "\u005c"";
            {if (true) return str;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(STAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) return true;
    }
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_11()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public gCQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x80,0x100,0x1813e40,0x2000000,0x1801e40,0x1801e40,0x1801e40,0x1801e40,0x1801e40,0x400000,0x1813e40,0x1e00,0x1e00,0x400000,0x1e00,0x2000,0x1801e40,0x400000,0x1bf8000,0x3f8000,0x400000,0x400000,0x3f8000,0x1801e40,0x1800000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public gCQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public gCQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new gCQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public gCQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new gCQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public gCQLParser(gCQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(gCQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
